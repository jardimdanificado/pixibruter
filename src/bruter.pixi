include "repl.pixi";//functions, variables, constants

//constants
//constants
//constants

undefined = 0;
null = -1;
false = 0;
true = 1;
medium_array = 64;

//keycodes
//keycodes
//keycodes

KEY_NULL = 0;
KEY_SOH = 1;
KEY_STX = 2;
KEY_ETX = 3;
KEY_EOT = 4;
KEY_ENQ = 5;
KEY_ACK = 6;
KEY_BEL = 7;
KEY_BS = 8;
KEY_HT = 9;
KEY_LF = 10;
KEY_VT = 11;
KEY_FF = 12;
KEY_CR = 13;
KEY_SO = 14;
KEY_SI = 15;
KEY_DLE = 16;
KEY_DC1 = 17;
KEY_DC2 = 18;
KEY_DC3 = 19;
KEY_DC4 = 20;
KEY_NAK = 21;
KEY_SYN = 22;
KEY_ETB = 23;
KEY_CAN = 24;
KEY_EM = 25;
KEY_SUB = 26;
KEY_ESC = 27;
KEY_FS = 28;
KEY_GS = 29;
KEY_RS = 30;
KEY_US = 31;
//KEY_SPACE = 32;
KEY_EXCLAMATION_MARK = 33;
KEY_QUOTATION_MARK = 34;
KEY_HASH = 35;
KEY_DOLLAR = 36;
KEY_PERCENT = 37;
KEY_AMPERSAND = 38;
KEY_APOSTROPHE = 39;
KEY_LEFT_PARENTHESIS = 40;
KEY_RIGHT_PARENTHESIS = 41;
KEY_ASTERISK = 42;
KEY_PLUS = 43;
KEY_COMMA = 44;
KEY_MINUS = 45;
KEY_PERIOD = 46;
KEY_SLASH = 47;
KEY_0 = 48;
KEY_1 = 49;
KEY_2 = 50;
KEY_3 = 51;
KEY_4 = 52;
KEY_5 = 53;
KEY_6 = 54;
KEY_7 = 55;
KEY_8 = 56;
KEY_9 = 57;
KEY_COLON = 58;
KEY_SEMICOLON = 59;
KEY_LESS_THAN = 60;
KEY_EQUALS = 61;
KEY_GREATER_THAN = 62;
KEY_QUESTION_MARK = 63;
KEY_AT = 64;
KEY_A = 65;
KEY_B = 66;
KEY_C = 67;
KEY_D = 68;
KEY_E = 69;
KEY_F = 70;
KEY_G = 71;
KEY_H = 72;
KEY_I = 73;
KEY_J = 74;
KEY_K = 75;
KEY_L = 76;
KEY_M = 77;
KEY_N = 78;
KEY_O = 79;
KEY_P = 80;
KEY_Q = 81;
KEY_R = 82;
KEY_S = 83;
KEY_T = 84;
KEY_U = 85;
KEY_V = 86;
KEY_W = 87;
KEY_X = 88;
KEY_Y = 89;
KEY_Z = 90;
KEY_LEFT_BRACKET = 91;
KEY_BACKSLASH = 92;
KEY_RIGHT_BRACKET = 93;
KEY_CARET = 94;
KEY_UNDERSCORE = 95;
KEY_GRAVE_ACCENT = 96;
KEY_a = 97;
KEY_b = 98;
KEY_c = 99;
KEY_d = 100;
KEY_e = 101;
KEY_f = 102;
KEY_g = 103;
KEY_h = 104;
KEY_i = 105;
KEY_j = 106;
KEY_k = 107;
KEY_l = 108;
KEY_m = 109;
KEY_n = 110;
KEY_o = 111;
KEY_p = 112;
KEY_q = 113;
KEY_r = 114;
KEY_s = 115;
KEY_t = 116;
KEY_u = 117;
KEY_v = 118;
KEY_w = 119;
KEY_x = 120;
KEY_y = 121;
KEY_z = 122;
KEY_LEFT_BRACE = 123;
KEY_PIPE = 124;
KEY_RIGHT_BRACE = 125;
KEY_TILDE = 126;
//KEY_DELETE = 127;

//primitive functions
//primitive functions
//primitive functions

fn dummy()
{
    ret(0);
}
variables.dummy = dummy;

fn just_return($value)
{
    ret($value);
}
variables.just_return = just_return;

fn set_all($array,$value)
{
    for($i = 0; $i < get_size($array); $i+1)
    {
        $array[$i] = $value;
    }
}

fn set_all_2d($array,$value)
{
    for($i = 0; $i < get_size($array); $i+1)
    {
        $array[$i] = $value;
    }
}

//memory functions
//memory functions
//memory functions

//container counter
container_counter = 0;

fn print_all()
{
    for($i = 0; $i < 1024; $i+1)
    {
        printf("$%d=%s\n", $i, $i);
    }
    printf("\n");
}
variables.print_all = print_all;

fn container_count()
{
    $count = new();
    ret($count);
}
variables.container_count = container_count;

fn print_container_count()
{
    container_counter = container_count();
    printf("Container count: %d\n", container_counter);
    remove(container_counter);
}
variables.print_container_count = print_container_count;

fn log_container_count()
{
    container_counter = container_count();
    logf("Container count: %d\n", container_counter);
    remove(container_counter);
}
variables.log_container_count = log_container_count;

fn flex($object,$size)
{
    $newsize = get_size($object) + $size;
    resize($object,$newsize);
    ret($newsize);
}
variables.flex = flex;

//error functions
//error functions
//error functions

fn error($message)
{
    printf("[Error]: %s\n", $message);
    halt;
}
variables.error = error;

fn errorf($message, $args)
{
    printf("[Error]: ");
    printf($message, $args);
    printf("\n");
    halt;
}
variables.errorf = errorf;

fn errorf1($message, $arg1)
{
    printf("[Error]: ");
    printf($message, $arg1);
    printf("\n");
    halt;
}
variables.errorf1 = errorf1;

fn errorf2($message, $arg1, $arg2)
{
    printf("[Error]: ");
    printf($message, $arg1, $arg2);
    printf("\n");
    halt;
}
variables.errorf2 = errorf2;

fn errorf3($message, $arg1, $arg2, $arg3)
{
    printf("[Error]: ");
    printf($message, $arg1, $arg2, $arg3);
    printf("\n");
    halt;
}
variables.errorf3 = errorf3;

fn errorf4($message, $arg1, $arg2, $arg3, $arg4)
{
    printf("[Error]: ");
    printf($message, $arg1, $arg2, $arg3, $arg4);
    printf("\n");
    halt;
}
variables.errorf4 = errorf4;

fn errorf5($message, $arg1, $arg2, $arg3, $arg4, $arg5)
{
    printf("[Error]: ");
    printf($message, $arg1, $arg2, $arg3, $arg4, $arg5);
    printf("\n");
    halt;
}
variables.errorf5 = errorf5;

fn errorf6($message, $arg1, $arg2, $arg3, $arg4, $arg5, $arg6)
{
    printf("[Error]: ");
    printf($message, $arg1, $arg2, $arg3, $arg4, $arg5, $arg6);
    printf("\n");
    halt;
}
variables.errorf6 = errorf6;

fn errorf7($message, $arg1, $arg2, $arg3, $arg4, $arg5, $arg6, $arg7)
{
    printf("[Error]: ");
    printf($message, $arg1, $arg2, $arg3, $arg4, $arg5, $arg6, $arg7);
    printf("\n");
    halt;
}
variables.errorf7 = errorf7;

fn errorf8($message, $arg1, $arg2, $arg3, $arg4, $arg5, $arg6, $arg7, $arg8)
{
    printf("[Error]: ");
    printf($message, $arg1, $arg2, $arg3, $arg4, $arg5, $arg6, $arg7, $arg8);
    printf("\n");
    halt;
}
variables.errorf8 = errorf8;

fn warning($message)
{
    printf("[Warning]: %s\n", $message);
}
variables.warning = warning;

fn warningf($message, $args)
{
    printf("[Warning]: ");
    printf($message, $args);
    printf("\n");
}
variables.warningf = warningf;

fn warningf1($message, $arg1)
{
    printf("[Warning]: ");
    printf($message, $arg1);
    printf("\n");
}
variables.warningf1 = warningf1;

fn warningf2($message, $arg1, $arg2)
{
    printf("[Warning]: ");
    printf($message, $arg1, $arg2);
    printf("\n");
}
variables.warningf2 = warningf2;

fn warningf3($message, $arg1, $arg2, $arg3)
{
    printf("[Warning]: ");
    printf($message, $arg1, $arg2, $arg3);
    printf("\n");
}
variables.warningf3 = warningf3;

fn warningf4($message, $arg1, $arg2, $arg3, $arg4)
{
    printf("[Warning]: ");
    printf($message, $arg1, $arg2, $arg3, $arg4);
    printf("\n");
}
variables.warningf4 = warningf4;

fn warningf5($message, $arg1, $arg2, $arg3, $arg4, $arg5)
{
    printf("[Warning]: ");
    printf($message, $arg1, $arg2, $arg3, $arg4, $arg5);
    printf("\n");
}
variables.warningf5 = warningf5;

fn warningf6($message, $arg1, $arg2, $arg3, $arg4, $arg5, $arg6)
{
    printf("[Warning]: ");
    printf($message, $arg1, $arg2, $arg3, $arg4, $arg5, $arg6);
    printf("\n");
}
variables.warningf6 = warningf6;

fn warningf7($message, $arg1, $arg2, $arg3, $arg4, $arg5, $arg6, $arg7)
{
    printf("[Warning]: ");
    printf($message, $arg1, $arg2, $arg3, $arg4, $arg5, $arg6, $arg7);
    printf("\n");
}
variables.warningf7 = warningf7;

fn warningf8($message, $arg1, $arg2, $arg3, $arg4, $arg5, $arg6, $arg7, $arg8)
{
    printf("[Warning]: ");
    printf($message, $arg1, $arg2, $arg3, $arg4, $arg5, $arg6, $arg7, $arg8);
    printf("\n");
}
variables.warningf8 = warningf8;

fn error_log($message)
{
    logf("[Error]: %s\n", $message);
    halt;
}
variables.error_log = error_log;

fn errorf_log($message, $args)
{
    logf("[Error]: ");
    logf($message, $args);
    logf("\n");
    halt;
}
variables.errorf_log = errorf_log;

fn errorf1_log($message, $arg1)
{
    logf("[Error]: ");
    logf($message, $arg1);
    logf("\n");
    halt;
}
variables.errorf1_log = errorf1_log;

fn errorf2_log($message, $arg1, $arg2)
{
    logf("[Error]: ");
    logf($message, $arg1, $arg2);
    logf("\n");
    halt;
}
variables.errorf2_log = errorf2_log;

fn errorf3_log($message, $arg1, $arg2, $arg3)
{
    logf("[Error]: ");
    logf($message, $arg1, $arg2, $arg3);
    logf("\n");
    halt;
}
variables.errorf3_log = errorf3_log;

fn errorf4_log($message, $arg1, $arg2, $arg3, $arg4)
{
    logf("[Error]: ");
    logf($message, $arg1, $arg2, $arg3, $arg4);
    logf("\n");
    halt;
}
variables.errorf4_log = errorf4_log;

fn errorf5_log($message, $arg1, $arg2, $arg3, $arg4, $arg5)
{
    logf("[Error]: ");
    logf($message, $arg1, $arg2, $arg3, $arg4, $arg5);
    logf("\n");
    halt;
}
variables.errorf5_log = errorf5_log;

fn errorf6_log($message, $arg1, $arg2, $arg3, $arg4, $arg5, $arg6)
{
    logf("[Error]: ");
    logf($message, $arg1, $arg2, $arg3, $arg4, $arg5, $arg6);
    logf("\n");
    halt;
}
variables.errorf6_log = errorf6_log;

fn errorf7_log($message, $arg1, $arg2, $arg3, $arg4, $arg5, $arg6, $arg7)
{
    logf("[Error]: ");
    logf($message, $arg1, $arg2, $arg3, $arg4, $arg5, $arg6, $arg7);
    logf("\n");
    halt;
}
variables.errorf7_log = errorf7_log;

fn errorf8_log($message, $arg1, $arg2, $arg3, $arg4, $arg5, $arg6, $arg7, $arg8)
{
    logf("[Error]: ");
    logf($message, $arg1, $arg2, $arg3, $arg4, $arg5, $arg6, $arg7, $arg8);
    logf("\n");
    halt;
}
variables.errorf8_log = errorf8_log;

fn warning_log($message)
{
    logf("[Warning]: %s\n", $message);
}
variables.warning_log = warning_log;

fn warningf_log($message, $args)
{
    logf("[Warning]: ");
    logf($message, $args);
    logf("\n");
}
variables.warningf_log = warningf_log;

fn warningf1_log($message, $arg1)
{
    logf("[Warning]: ");
    logf($message, $arg1);
    logf("\n");
}
variables.warningf1_log = warningf1_log;

fn warningf2_log($message, $arg1, $arg2)
{
    logf("[Warning]: ");
    logf($message, $arg1, $arg2);
    logf("\n");
}
variables.warningf2_log = warningf2_log;

fn warningf3_log($message, $arg1, $arg2, $arg3)
{
    logf("[Warning]: ");
    logf($message, $arg1, $arg2, $arg3);
    logf("\n");
}
variables.warningf3_log = warningf3_log;

fn warningf4_log($message, $arg1, $arg2, $arg3, $arg4)
{
    logf("[Warning]: ");
    logf($message, $arg1, $arg2, $arg3, $arg4);
    logf("\n");
}
variables.warningf4_log = warningf4_log;

fn warningf5_log($message, $arg1, $arg2, $arg3, $arg4, $arg5)
{
    logf("[Warning]: ");
    logf($message, $arg1, $arg2, $arg3, $arg4, $arg5);
    logf("\n");
}
variables.warningf5_log = warningf5_log;

fn warningf6_log($message, $arg1, $arg2, $arg3, $arg4, $arg5, $arg6)
{
    logf("[Warning]: ");
    logf($message, $arg1, $arg2, $arg3, $arg4, $arg5, $arg6);
    logf("\n");
}
variables.warningf6_log = warningf6_log;

fn warningf7_log($message, $arg1, $arg2, $arg3, $arg4, $arg5, $arg6, $arg7)
{
    logf("[Warning]: ");
    logf($message, $arg1, $arg2, $arg3, $arg4, $arg5, $arg6, $arg7);
    logf("\n");
}
variables.warningf7_log = warningf7_log;

fn warningf8_log($message, $arg1, $arg2, $arg3, $arg4, $arg5, $arg6, $arg7, $arg8)
{
    logf("[Warning]: ");
    logf($message, $arg1, $arg2, $arg3, $arg4, $arg5, $arg6, $arg7, $arg8);
    logf("\n");
}
variables.warningf8_log = warningf8_log;

//util functions
//util functions
//util functions

fn refresh_seed()
{
    rand_seed( get_timer() + get_ticks() );
}
variables.refresh_seed = refresh_seed;

fn random($min,$max)
{
    //considering that rand() returns a value between 0 and 32767
    ret((rand() % ($max - $min + 1)) + $min);
}
variables.random = random;

fn recursive_prop($obj, $prop)
{
    if(strstr($prop, ".") > -1)
    {
        $cloned = clone($prop);
        $splited = string_split($cloned, ".");
        $size = get_size($splited);
        for($i=0; $i < $size; $i+1)
        {
            if($splited[$i][0] > 47 && $splited[$i][0] < 58)
            {
                $obj = $obj[str_to_num($splited[$i])];
            }
            else
            {
                $obj = get_prop($obj, $splited[$i]);
            }
            remove($splited[$i]);
        }
        remove($splited);
        remove($cloned);
        ret($obj);
    }
    else
    {
        ret(get_prop($obj, $prop));
    }
}
variables.recursive_prop = recursive_prop;

fn recursive_set_prop($obj, $prop, $value)
{
    //printf("recursive_prop(%s,%s)\n", $obj, $prop);
    if(strstr($prop, ".") > -1)
    {
        $cloned = clone($prop);
        $splited = string_split($cloned, ".");
        $size = get_size($splited);
        for($i=0; $i < $size-1; $i+1)
        {
            if($splited[$i][0] > 47 && $splited[$i][0] < 58)
            {
                //printf("teste::: recursive_prop: %s\n", $splited[$i]);
                $obj = $obj[str_to_num($splited[$i])];
            }
            else
            {
                $obj = get_prop($obj, $splited[$i]);
            }
            remove($splited[$i]);
        }
        set_prop($obj, $splited[$size-1], $value);
        remove($splited[$size-1]);
        remove($splited);
        remove($cloned);
    }
    else
    {
        set_prop($obj, $prop, $value);
    }
}
variables.recursive_set_prop = recursive_set_prop;

fn default($obj, $default)
{
    if($obj == 0)
    {
        ret($default);
    }
    else
    {
        ret($obj);
    }
}
variables.default = default;

fn define ($name, $value)
{
    $target = recursive_prop(variables, $name);
    $target = $value;
}
variables.define = define;

fn set($name, $arg1, $arg2, $arg3, $arg4, $arg5, $arg6, $arg7, $arg8, $arg9, $arg10, $arg11, $arg12, $arg13, $arg14, $arg15, $arg16, $arg17, $arg18, $arg19, $arg20, $arg21, $arg22, $arg23, $arg24, $arg25, $arg26, $arg27, $arg28, $arg29, $arg30, $arg31, $arg32, $arg33, $arg34, $arg35, $arg36, $arg37, $arg38, $arg39, $arg40, $arg41, $arg42, $arg43, $arg44, $arg45, $arg46, $arg47, $arg48, $arg49, $arg50, $arg51, $arg52, $arg53, $arg54, $arg55, $arg56, $arg57, $arg58, $arg59, $arg60, $arg61, $arg62, $arg63, $arg64, $arg65, $arg66, $arg67, $arg68, $arg69, $arg70, $arg71, $arg72, $arg73, $arg74, $arg75, $arg76, $arg77, $arg78, $arg79, $arg80, $arg81, $arg82, $arg83, $arg84, $arg85, $arg86, $arg87, $arg88, $arg89, $arg90, $arg91, $arg92, $arg93, $arg94, $arg95, $arg96, $arg97, $arg98, $arg99)
{
    if (strcmp($arg1, "from") == 0)
    {
        $func = recursive_prop(variables, $arg2);
        if ($func == 0)
        {
            warningf1("set: function %s not found", $arg2);
        }
        $result = $func($arg3, $arg4, $arg5, $arg6, $arg7, $arg8, $arg9, $arg10, $arg11, $arg12, $arg13, $arg14, $arg15, $arg16, $arg17, $arg18, $arg19, $arg20, $arg21, $arg22, $arg23, $arg24, $arg25, $arg26, $arg27, $arg28, $arg29, $arg30, $arg31, $arg32, $arg33, $arg34, $arg35, $arg36, $arg37, $arg38, $arg39, $arg40, $arg41, $arg42, $arg43, $arg44, $arg45, $arg46, $arg47, $arg48, $arg49, $arg50, $arg51, $arg52, $arg53, $arg54, $arg55, $arg56, $arg57, $arg58, $arg59, $arg60, $arg61, $arg62, $arg63, $arg64, $arg65, $arg66, $arg67, $arg68, $arg69, $arg70, $arg71, $arg72, $arg73, $arg74, $arg75, $arg76, $arg77, $arg78, $arg79, $arg80, $arg81, $arg82, $arg83, $arg84, $arg85, $arg86, $arg87, $arg88, $arg89, $arg90, $arg91, $arg92, $arg93, $arg94, $arg95, $arg96, $arg97, $arg98, $arg99);
        if $result == 0
        {
            warningf1("set: function %s returned 0", $name);
        }
        recursive_set_prop(variables, $name, $result);
    }
    else
    {
        recursive_set_prop(variables, $name, $arg1);
    }
}
variables.set = set;

//obsolete
fn create($name, $value)
{
    set_prop(variables, $name, $value);
}
variables.create = create;

//obsolete
fn create_empty($name)
{
    set_prop(variables, $name, new());
}
variables.create_empty = create_empty;

//obsolete
fn create_array($name, $size)
{
    set_prop(variables, $name, new($size));
}
variables.create_array = create_array;

//obsolete
fn create_matrix($name, $xsize, $ysize)
{
    set_prop(variables, $name, new($xsize, $ysize));
}
variables.create_matrix = create_matrix;

//threads functions
//threads functions
//threads functions

fn manual_thread($function)
{
    ret(thread_create($function,0))
}
variables.manual_thread = manual_thread;

fn auto_thread($function, $interval)
{
    if($interval <= 0)
    {
        warning("auto_thread: interval is 0, using manual_thread instead");
        ret(manual_thread($function));
    }
    ret(thread_create($function,$interval,THREAD_FLAG_AUTO_DESTROY))
}
variables.auto_thread = auto_thread;

//list functions
//list functions
//list functions

fn list_push($list,$element)
{
    $list[flex($list, 1)-1] = $element;
}
variables.list_push = list_push;

fn list_pop($list)
{
    flex($list, -1);
}
variables.list_pop = list_pop;

fn list_insert($list,$element,$position)
{
    $oldsize = flex($list, 1) - 1;
    $position = default($position,$oldsize);
    for($i = $oldsize; $i >= $position; $i-1)
    {
        $list[$i+1] = $list[$i];
    }
    $list[$position] = $element;
    remove($oldsize);
}
variables.list_insert = list_insert;

fn list_remove($list,$position)
{
    $oldsize = get_size($list);
    for($i = $position; $i < $oldsize; $i+1)
    {
        $list[$i] = $list[$i+1];
    }
    resize($list,$oldsize - 1);
    remove($oldsize);
}
variables.list_remove = list_remove;

fn list_find($list,$element)
{
    $oldsize = get_size($list);
    for($i = 0; $i < $oldsize; $i+1)
    {
        if($list[$i] == $element)
        {
            ret($i);
        }
    }
    remove($oldsize);
    ret(-1);
}
variables.list_find = list_find;

//strings functions
//strings functions
//strings functions

fn string_concat99($str1,$str2,$str3,$str4,$str5,$str6,$str7,$str8,$str9,$str10,$str11,$str12,$str13,$str14,$str15,$str16,$str17,$str18,$str19,$str20,$str21,$str22,$str23,$str24,$str25,$str26,$str27,$str28,$str29,$str30,$str31,$str32,$str33,$str34,$str35,$str36,$str37,$str38,$str39,$str40,$str41,$str42,$str43,$str44,$str45,$str46,$str47,$str48,$str49,$str50,$str51,$str52,$str53,$str54,$str55,$str56,$str57,$str58,$str59,$str60,$str61,$str62,$str63,$str64,$str65,$str66,$str67,$str68,$str69,$str70,$str71,$str72,$str73,$str74,$str75,$str76,$str77,$str78,$str79,$str80,$str81,$str82,$str83,$str84,$str85,$str86,$str87,$str88,$str89,$str90,$str91,$str92,$str93,$str94,$str95,$str96,$str97,$str98,$str99)
{
    $result = "";
    if ($str1 != 0) { $result = sprintf("%s%s", $result, $str1); }
    if ($str2 != 0) { $result = sprintf("%s%s", $result, $str2); }
    if ($str3 != 0) { $result = sprintf("%s%s", $result, $str3); }
    if ($str4 != 0) { $result = sprintf("%s%s", $result, $str4); }
    if ($str5 != 0) { $result = sprintf("%s%s", $result, $str5); }
    if ($str6 != 0) { $result = sprintf("%s%s", $result, $str6); }
    if ($str7 != 0) { $result = sprintf("%s%s", $result, $str7); }
    if ($str8 != 0) { $result = sprintf("%s%s", $result, $str8); }
    if ($str9 != 0) { $result = sprintf("%s%s", $result, $str9); }
    
    if ($str10 != 0) { $result = sprintf("%s%s", $result, $str10); }
    if ($str11 != 0) { $result = sprintf("%s%s", $result, $str11); }
    if ($str12 != 0) { $result = sprintf("%s%s", $result, $str12); }
    if ($str13 != 0) { $result = sprintf("%s%s", $result, $str13); }
    if ($str14 != 0) { $result = sprintf("%s%s", $result, $str14); }
    if ($str15 != 0) { $result = sprintf("%s%s", $result, $str15); }
    if ($str16 != 0) { $result = sprintf("%s%s", $result, $str16); }
    if ($str17 != 0) { $result = sprintf("%s%s", $result, $str17); }
    if ($str18 != 0) { $result = sprintf("%s%s", $result, $str18); }
    if ($str19 != 0) { $result = sprintf("%s%s", $result, $str19); }

    if ($str20 != 0) { $result = sprintf("%s%s", $result, $str20); }
    if ($str21 != 0) { $result = sprintf("%s%s", $result, $str21); }
    if ($str22 != 0) { $result = sprintf("%s%s", $result, $str22); }
    if ($str23 != 0) { $result = sprintf("%s%s", $result, $str23); }
    if ($str24 != 0) { $result = sprintf("%s%s", $result, $str24); }
    if ($str25 != 0) { $result = sprintf("%s%s", $result, $str25); }
    if ($str26 != 0) { $result = sprintf("%s%s", $result, $str26); }
    if ($str27 != 0) { $result = sprintf("%s%s", $result, $str27); }
    if ($str28 != 0) { $result = sprintf("%s%s", $result, $str28); }
    if ($str29 != 0) { $result = sprintf("%s%s", $result, $str29); }
    
    if ($str30 != 0) { $result = sprintf("%s%s", $result, $str30); }
    if ($str31 != 0) { $result = sprintf("%s%s", $result, $str31); }
    if ($str32 != 0) { $result = sprintf("%s%s", $result, $str32); }
    if ($str33 != 0) { $result = sprintf("%s%s", $result, $str33); }
    if ($str34 != 0) { $result = sprintf("%s%s", $result, $str34); }
    if ($str35 != 0) { $result = sprintf("%s%s", $result, $str35); }
    if ($str36 != 0) { $result = sprintf("%s%s", $result, $str36); }
    if ($str37 != 0) { $result = sprintf("%s%s", $result, $str37); }
    if ($str38 != 0) { $result = sprintf("%s%s", $result, $str38); }
    if ($str39 != 0) { $result = sprintf("%s%s", $result, $str39); }

    if ($str40 != 0) { $result = sprintf("%s%s", $result, $str40); }
    if ($str41 != 0) { $result = sprintf("%s%s", $result, $str41); }
    if ($str42 != 0) { $result = sprintf("%s%s", $result, $str42); }
    if ($str43 != 0) { $result = sprintf("%s%s", $result, $str43); }
    if ($str44 != 0) { $result = sprintf("%s%s", $result, $str44); }
    if ($str45 != 0) { $result = sprintf("%s%s", $result, $str45); }
    if ($str46 != 0) { $result = sprintf("%s%s", $result, $str46); }
    if ($str47 != 0) { $result = sprintf("%s%s", $result, $str47); }
    if ($str48 != 0) { $result = sprintf("%s%s", $result, $str48); }
    if ($str49 != 0) { $result = sprintf("%s%s", $result, $str49); }

    if ($str50 != 0) { $result = sprintf("%s%s", $result, $str50); }
    if ($str51 != 0) { $result = sprintf("%s%s", $result, $str51); }
    if ($str52 != 0) { $result = sprintf("%s%s", $result, $str52); }
    if ($str53 != 0) { $result = sprintf("%s%s", $result, $str53); }
    if ($str54 != 0) { $result = sprintf("%s%s", $result, $str54); }
    if ($str55 != 0) { $result = sprintf("%s%s", $result, $str55); }
    if ($str56 != 0) { $result = sprintf("%s%s", $result, $str56); }
    if ($str57 != 0) { $result = sprintf("%s%s", $result, $str57); }
    if ($str58 != 0) { $result = sprintf("%s%s", $result, $str58); }
    if ($str59 != 0) { $result = sprintf("%s%s", $result, $str59); }

    if ($str60 != 0) { $result = sprintf("%s%s", $result, $str60); }
    if ($str61 != 0) { $result = sprintf("%s%s", $result, $str61); }
    if ($str62 != 0) { $result = sprintf("%s%s", $result, $str62); }
    if ($str63 != 0) { $result = sprintf("%s%s", $result, $str63); }
    if ($str64 != 0) { $result = sprintf("%s%s", $result, $str64); }
    if ($str65 != 0) { $result = sprintf("%s%s", $result, $str65); }
    if ($str66 != 0) { $result = sprintf("%s%s", $result, $str66); }
    if ($str67 != 0) { $result = sprintf("%s%s", $result, $str67); }
    if ($str68 != 0) { $result = sprintf("%s%s", $result, $str68); }
    if ($str69 != 0) { $result = sprintf("%s%s", $result, $str69); }

    if ($str70 != 0) { $result = sprintf("%s%s", $result, $str70); }
    if ($str71 != 0) { $result = sprintf("%s%s", $result, $str71); }
    if ($str72 != 0) { $result = sprintf("%s%s", $result, $str72); }
    if ($str73 != 0) { $result = sprintf("%s%s", $result, $str73); }
    if ($str74 != 0) { $result = sprintf("%s%s", $result, $str74); }
    if ($str75 != 0) { $result = sprintf("%s%s", $result, $str75); }
    if ($str76 != 0) { $result = sprintf("%s%s", $result, $str76); }
    if ($str77 != 0) { $result = sprintf("%s%s", $result, $str77); }
    if ($str78 != 0) { $result = sprintf("%s%s", $result, $str78); }
    if ($str79 != 0) { $result = sprintf("%s%s", $result, $str79); }

    if ($str80 != 0) { $result = sprintf("%s%s", $result, $str80); }
    if ($str81 != 0) { $result = sprintf("%s%s", $result, $str81); }
    if ($str82 != 0) { $result = sprintf("%s%s", $result, $str82); }
    if ($str83 != 0) { $result = sprintf("%s%s", $result, $str83); }
    if ($str84 != 0) { $result = sprintf("%s%s", $result, $str84); }
    if ($str85 != 0) { $result = sprintf("%s%s", $result, $str85); }
    if ($str86 != 0) { $result = sprintf("%s%s", $result, $str86); }
    if ($str87 != 0) { $result = sprintf("%s%s", $result, $str87); }
    if ($str88 != 0) { $result = sprintf("%s%s", $result, $str88); }
    if ($str89 != 0) { $result = sprintf("%s%s", $result, $str89); }

    if ($str90 != 0) { $result = sprintf("%s%s", $result, $str90); }
    if ($str91 != 0) { $result = sprintf("%s%s", $result, $str91); }
    if ($str92 != 0) { $result = sprintf("%s%s", $result, $str92); }
    if ($str93 != 0) { $result = sprintf("%s%s", $result, $str93); }
    if ($str94 != 0) { $result = sprintf("%s%s", $result, $str94); }
    if ($str95 != 0) { $result = sprintf("%s%s", $result, $str95); }
    if ($str96 != 0) { $result = sprintf("%s%s", $result, $str96); }
    if ($str97 != 0) { $result = sprintf("%s%s", $result, $str97); }
    if ($str98 != 0) { $result = sprintf("%s%s", $result, $str98); }
    if ($str99 != 0) { $result = sprintf("%s%s", $result, $str99); }
}
variables.string_concat99 = string_concat99;

fn string_new($size)
{
    $temp = "";
    $temp = new($size);
    ret($temp);
}
variables.string_new = string_new;

fn string_sub($string,$start,$end)
{
    $newstr = "";
    resize($newstr,$end - $start);
    $offset = 0;
    for($i = $start; $i < $end; $i+1)
    {
        $newstr[$offset] = $string[$i];
        $offset = $offset + 1;
    }
    ret($newstr);
}
variables.string_sub = string_sub;

//counting ocurrences using strstr
fn string_ocurrences($str1,$str2)
{
    $count = 0;
    $offset = 0;
    $len = strlen($str2);
    while($offset <= strlen($str1))
    {
        $offset = strstr($str1,$offset,$str2);
		if($offset == -1)
        {
            break;
        }
        $temp_str = string_sub($str1, 0, $offset);
        if(strstr($temp_str, "`") != -1)
        {
            $temp_counter = 0;
            for ($i = 0; $i < strlen($temp_str); $i+1)
            {
                if ($temp_str[$i] == '`')
                {
                    $temp_counter = $temp_counter + 1;
                }
            }
            if ($temp_counter % 2 == 0)
            {
                $count = $count + 1;
                $offset = $offset + $len;
            }
            else
            {
                $offset = $offset + $len;
            }
        }
        else 
        {
            $count = $count + 1;
            $offset = $offset + $len;
        }
	}
    //remove($offset);
    ret($count);
}
variables.string_ocurrences = string_ocurrences;

//this string returns the positions of each ocurrence
fn string_ocurrences_advanced($str1,$str2)
{
    $count = 0;
    $offset = 0;
    $len = strlen($str2);
    $result = new(string_ocurrences($str1,$str2));
    while($offset <= strlen($str1))
    {
        $offset = strstr($str1,$offset,$str2);
        if($offset == -1)
        {
            break;
        }
        if (strstr(string_sub($str1, 0, $offset), "`") != -1)
        {
            $temp_counter = 0;
            for ($i = 0; $i < strlen(string_sub($str1, 0, $offset)); $i+1)
            {
                if (string_sub($str1, 0, $offset)[$i] == '`')
                {
                    $temp_counter = $temp_counter + 1;
                }
            }
            if ($temp_counter % 2 == 0)
            {
                $result[$count] = $offset;
                $count = $count + 1;
                $offset = $offset + $len;
            }
            else
            {
                $offset = $offset + $len;
            }
        }
        else
        {
            $result[$count] = $offset;
            $count = $count + 1;
            $offset = $offset + $len;
        }
    }
    ret($result);
}
variables.string_ocurrences_advanced = string_ocurrences_advanced;

fn string_split( $string, $separator )
{
    $offset = 0;
    $len = strlen($separator);
    $ocurrences = string_ocurrences_advanced($string,$separator);
    $result = new(get_size($ocurrences)+1);
    clean($result);
    for($i = 0; $i < get_size($result)-1; $i+1)
    {
        $result[$i] = clone(string_sub($string,$offset,$ocurrences[$i]));
        $offset = $ocurrences[$i] + $len;
    }
    $result[get_size($result)-1] = clone(string_sub($string,$offset,strlen($string)));
    remove($ocurrences);
    ret($result);
}
variables.string_split = string_split;


fn string_split2( $str, $separator )
{
    $rv = new( 16, 1, INT )
    clean( $rv, -1 )
    $str_count = 0
    $str_len = strlen( $str )
    $separator_len = strlen( $separator )
    $ptr = 0
    while 1
    {
	$prev_ptr = $ptr
        $ptr = strstr( $str, $ptr, $separator, 0 )
        if $ptr < 0
        {
	    if $prev_ptr >= $str_len { break }
	    $ptr = $str_len
    	}
        $len = $ptr - $prev_ptr
	$s = new( $len, 1, INT8 )
	copy( $s, $str, 0, $prev_ptr, $len )
	$cur_size = get_size( $rv )
	if $str_count >= $cur_size
	{
	    $cur_size = $str_count + 16
	    resize( $rv, $cur_size, 1, INT )
	}
	$rv[ $str_count ] = $s
	$str_count + 1
        $ptr + $separator_len
    }
    resize( $rv, $str_count, 1, INT )
    ret( $rv )
}

fn string_replace( $str1, $str2, $str3 )//modified function, original can be found at pixilang3/lib/string.pixi
{
    $str1_len = strlen( $str1 )
    $str2_len = strlen( $str2 )
    $str3_len = strlen( $str3 )
    if $str1_len <= 0 
    {
        error("string_replace: string 1 is empty, halting..."); 
    }
    if $str2_len <= 0 
    {
        error("string_replace: string 2 is empty, halting..."); 
    }
    if $str3_len < 0 
    {
        error("string_replace: string 3 is empty, halting...");
    }
    $ptr = 0
    while 1
    {
        $ptr = strstr( $str1, $ptr, $str2, 0 )
        if $ptr < 0 { break }
        $d = $str3_len - $str2_len
        if $str1_len + $d > get_size( $str1 )
        {
            resize( $str1, $str1_len + $d, 1 )
        }
        copy( $str1, $str1, $ptr + $str3_len, $ptr + $str2_len, $str1_len )
        copy( $str1, $str3, $ptr, 0, $str3_len )
        $str1_len + $d
        $str1[ $str1_len ] = 0
        $ptr + $str3_len
    }
    ret($str1);
}
variables.string_replace = string_replace;

fn string_replace_char($string,$oldchar,$newchar)
{
    for($i = 0; $i < strlen($string); $i+1)
    {
        if($string[$i] == $oldchar)
        {
            $string[$i] = $newchar;
        }
        else
        {
            $string[$i] = $string[$i];
        }
    }
    ret($string);
}
variables.string_replace_char = string_replace_char;

fn string_remove_char($string,$char)
{
    $_result = new();
    sprintf($_result, "");
    for($i = 0; $i < strlen($string); $i+1)
    {
        if($string[$i] != $char)
        {
            sprintf($_result, "%s%c", $_result, $string[$i]);
        }
        //printf("string_remove_char: %s\n", $_result);
    }
    ret($_result);
}
variables.string_remove_char = string_remove_char;

//basic constructors
//basic constructors
//basic constructors

fn vector2($x, $y)
{
    $temp = new();
    $temp.x = $x;
    $temp.y = $y;
    ret($temp);
}
variables.vector2 = vector2;

//file functions
//file functions
//file functions

fn read_file($filename)
{
    $size = get_file_size($filename);
    $file = fopen($filename,"rb");
    if($file == 0)
    {
        errorf1("read_file: file %s not found", $filename);
    }
    $result_ = string_new($size);
    fread($result_,$size,$file);
    fclose($file);
    ret($result_);
}
variables.read_file = read_file;

fn read_file_by_char($filename)//for text files
{
    $size = get_file_size($filename);
    $file = fopen($filename,"rb");
    if($file == 0)
    {
        errorf1("read_file: file %s not found", $filename);
    }
    $result_ = "";
    sprintf($result_,"");
    for($i = 0; $i < $size; $i+1)
    {
        sprintf($result_,"%s%c",$result_,fgetc($file));
    }
    fclose($file);
    ret($result_);
}
variables.read_file_by_char = read_file_by_char;

read_txt = read_file_by_char;
variables.read_txt = read_txt;

fn read_file_safe($filepath)
{
    $txt = read_file($filepath);
    $result = "";
    sprintf($result, "%s", $txt);
    remove($txt);
    ret($result);
}
variables.read_file_safe = read_file_safe;

fn write_file($filename,$content)
{
    $file = fopen($filename,"wb");
    fputs($content,$file);
    fclose($file);
    //remove($file);
}
variables.write_file = write_file;

//ini functions
//ini functions
//ini functions

//ini loader without sections
fn ini_load($file)
{
    $result = new();
    $splited = string_split($file,"\n");
    $lsplited = new();
    for($i = 0; $i < get_size($splited); $i+1)
    {
        $lsplited = string_split($splited[$i]," ");
        if(strstr($lsplited[1],"\"") != -1)
        {
            string_replace($lsplited[1],"\"","");
        }
        else
        {
            $lsplited[1] = str_to_num($lsplited[1]);
        }
        set_prop($result,$lsplited[0],$lsplited[1]);
    }
    remove($lsplited);
    remove($splited);
    remove($file);
    ret($result);
}
variables.ini_load = ini_load;

fn ini_save($file,$ini)
{
    $result = "";
    $keys = get_proplist($ini);
    $strnum = "";
    for($i = 0; $i < get_size($keys); $i+1)
    {
        $prop = get_prop($ini,$keys[$i]);
        if($prop[0] > 0)
        {
            sprintf($result,"%s%s \"%s\"\n",$result,$keys[$i],$prop);
        }
        else
        {
            sprintf($result,"%s%s %d\n",$result,$keys[$i],$prop);
        }
    }
    write_file($file,$result);
    remove($result);
    remove($keys);
}
variables.ini_save = ini_save;

//bytestring functions
//bytestring functions
//bytestring functions

fn bytestring_to_num($str)
{
    $result = 0;
    $len = get_size($str);
    if($len > 1)
    {    
        for($i=0;$i<$len-1;$i+1)
        {
            $result = pow(256,($len-$i-1))*$str[$i] + $result;
        }
    }
    $result = $result + $str[$len-1] - ($len-1);
    ret($result);
}

fn num_to_bytestring($num)
{
    $result = ""
    sprintf($result, "");
    $len = 1;
    $max = 256;
    while($num >= $max)
    {
        $len = $len + 1;
        $max = $max * 256;
    }
    $max = $max / 256;
    for($i=0;$i<$len-1;$i+1)
    {
        sprintf($result, "%s%c", $result, $num / $max);
        $num = $num % $max;
        $max = $max / 256;
    }
    sprintf($result, "%s%c", $result, $num + ($len-1));
    ret($result);
}

//condition functions
//condition functions
//condition functions


fn parse_condition($splited)
{
    if(strcmp($splited[1], "==") == 0)
    {
        if($splited[0][0] >= '0' && $splited[0][0] <= '9' || $splited[0][0] == '-')
        {
            if($splited[0] == $splited[2])
            {
                ret(true);
            }
            else
            {
                ret(false);
            }
        }
        else
        {
            if(strcmp($splited[0], $splited[2]) == 0)
            {
                ret(true);
            }
            else
            {
                ret(false);
            }
        }
    }
    else
    {
        if(strcmp($splited[1], ">=") == 0)
        {
            if($splited[0] >= $splited[2])
            {
                ret(true);
            }
            else
            {
                ret(false);
            }
        }
        else
        {
            if(strcmp($splited[1], "<=") == 0)
            {
                if($splited[0] <= $splited[2])
                {
                    ret(true);
                }
                else
                {
                    ret(false);
                }
            }
            else
            {
                if(strcmp($splited[1], ">") == 0)
                {
                    if($splited[0] > $splited[2])
                    {

                        ret(true);
                    }
                    else
                    {
                        ret(false);
                    }
                }
                else
                {
                    if(strcmp($splited[1], "<") == 0)
                    {
                        if($splited[0] == $splited[2])
                        {
                            ret(true);
                        }
                        else
                        {
                            ret(false);
                        }
                    }
                    else
                    {
                        if(strcmp($splited[1], "includes") == 0)
                        {
                            if(get_prop($splited[0],$splited[2]) != 0)
                            {
                                ret(true);
                            }
                            else
                            {
                                ret(false);
                            }
                        }
                        else
                        {
                            error("parse_condition: invalid operator");
                        }
                    }
                }
            }
        }
    }
}

fn _if($a, $op, $b, $callback)
{
    $temp = new(3);
    $temp[0] = $a;
    $temp[1] = $op;
    $temp[2] = $b;
    if(parse_condition($temp))
    {
        $callback();
    }
    remove($temp);
}
set_prop(variables, "if", _if);

fn _ifnot($a, $op, $b, $callback)
{
    $temp = new(3);
    $temp[0] = $a;
    $temp[1] = $op;
    $temp[2] = $b;
    if(parse_condition($temp))
    {
        $callback();
    }
    remove($temp);
}
set_prop(variables, "ifnot", _ifnot);

fn _ifelse($a, $op, $b, $callback1, $callback2)
{
    $temp = new(3);
    $temp[0] = $a;
    $temp[1] = $op;
    $temp[2] = $b;
    if(parse_condition($temp))
    {
        $callback1();
    }
    else
    {
        $callback2();
    }
    remove($temp);
}
set_prop(variables, "ifelse", _ifelse);

fn _pif($a, $op, $b, $procedure)//procedure if
{
    $temp = new(3);
    $temp[0] = $a;
    $temp[1] = $op;
    $temp[2] = $b;
    if(parse_condition($temp))
    {
        eval($procedure);
    }
    remove($temp);
}
set_prop(variables, "pif", _pif);

fn _pifnot($a, $op, $b, $procedure)//procedure if not
{
    $temp = new(3);
    $temp[0] = $a;
    $temp[1] = $op;
    $temp[2] = $b;
    if(parse_condition($temp))
    {
        eval($procedure);
    }
    remove($temp);
}
set_prop(variables, "pifnot", _pifnot);

fn _pifelse($a, $op, $b, $procedure1, $procedure2)//procedure if else
{
    $temp = new(3);
    $temp[0] = $a;
    $temp[1] = $op;
    $temp[2] = $b;
    if(parse_condition($temp))
    {
        eval($procedure1);
    }
    else
    {
        eval($procedure2);
    }
    remove($temp);
}
set_prop(variables, "pifelse", _pifelse);

//loop functions
//loop functions
//loop functions


fn repeat($times, $callback)
{
    for($i = 0; $i < $times; $i+1)
    {
        $callback();
    }
}


fn repeat_for($start, $end, $callback)
{
    for($i = $start; $i < $end; $i+1)
    {
        $callback();
    }
}

//procedure functions 
//procedure functions 
//procedure functions 

fn procedure_parse($text) //obsolete
{
    warning("procedure_parse: this function is obsolete.");
    $result = string_remove_char($text, '\n');
    if($result[get_size($result)-1] == ';')
    {
        $result[get_size($result)-1] = '\0';
    }
    $splited = string_split2($result, ";");
    remove($result);
    ret($splited);
}
variables.procedure_parse = procedure_parse;

fn procedure_load($filepath,$name)
{
    $result = read_txt($filepath);
    if($name != 0)
    {
        set_prop(variables, $name, $result);
    }
    ret($result);
}
variables.procedure_load = procedure_load;

fn procedure_run($procedure) //just a safe eval
{
    printf("procedure_run: %s\n", $procedure);
    if($procedure == 0)
    {
        error("procedure_run: procedure is null");
    }
    eval($procedure);
}
variables.procedure_run = procedure_run;

fn procedure_repeat($procedure,$times)
{
    if($times <= 0)
    {
        error("procedure_repeat: times <= 0");
    }
    for($i = 0; $i < $times; $i+1)
    {
        eval($procedure);
    }
}
variables.procedure_repeat = procedure_repeat;

fn procedure_for($procedure,$start,$end)
{
    if($start > $end)
    {
        error("procedure_for: start > end");
    }
    for($i = $start; $i < $end; $i+1)
    {
        eval($procedure[$i]);  
    }
}
variables.procedure_for = procedure_for;

// image functions
// image functions
// image functions

//obsolete
fn img_to_txt($img)
{
    $xsize = get_xsize($img);
    $ysize = get_ysize($img);
    $current = "";
    for($y = 0; $y < $ysize; $y+1)
    {
        for($x = 0; $x < $xsize; $x+1)
        {
            sprintf($current,"%s%c%c%c", $current, get_red($img[$x, $y]), get_green($img[$x, $y]), get_blue($img[$x, $y]));
        }
    }
    ret($current);
}
variables.img_to_txt = img_to_txt;

//obsolete
fn imgwa_to_txt($img)
{
    $xsize = get_xsize($img);
    $ysize = get_ysize($img);
    $result = new($ysize);
    $current = "";
    $alpha = get_alpha($img);
    for($y = 0; $y < $ysize; $y+1)
    {
        for($x = 0; $x < $xsize; $x+1)
        {
            $current = sprintf("%s%c%c%c%c", $current, $img[$x][$y].r, $img[$x][$y].g, $img[$x][$y].b, $alpha[$x][$y]);
        }
        list_push($result, $current);
        sprintf($current, "");
    }
    ret($result);
}
variables.imgwa_to_txt = imgwa_to_txt;

// layers functions
// layers functions
// layers functions

fn layer($container,$x,$y,$width,$height)
{
    $temp = 1;
    if($container > 0)
    {
        $temp = $container;
    }
    else
    {
        $temp = new($width,$height,INT8);
    }
    $alpha = new(default($width,get_xsize($temp)), default($height,get_ysize($temp)), INT8)
    clean($alpha,255);
    set_alpha($temp, $alpha);
    set_prop($temp, "position", vector2(0,0));
    ret($temp);
}
variables.layer = layer;

fn layers_merge($layers)// incomplete
{
    $temp_size = new();
    $temp_size.x = get_xsize($layers[0].color);
    $temp_size.y = get_ysize($layers[0].color);

    $result = new($temp_size.x,$temp_size.y,INT8);
    clean($result);
    set_alpha($result,new($temp_size.x,$temp_size.y,INT8));
    clean(get_alpha($result));
    $temp_nsize = get_size($layers[0]);

    remove($temp_size);
    ret($result);
}
variables.layers_merge = layers_merge;

fn layers_render($layers)
{
    clear();
    for($i = 0; $i < get_size($layers); $i+1)
    {
        pixi($layers[$i],$layers[$i].position.x,$layers[$i].position.y);
    }
}
variables.layers_render = layers_render;

// input functions
// input functions
// input functions

fn key_new($keycode,$callback,$arg,$up)//down = 0 for down, 1 for up
{
    $temp = new();
    $temp.keycode = $keycode;
    $temp.callback = $callback;
    $temp.up = $up;
    ret($temp);
}

fn keyboard_new()
{
    $temp = new();
    $temp.keys = new();
    ret($temp);
}
variables.keyboard_new = keyboard_new;

fn keyboard_add($keyboard,$keycode,$up,$callback,$arg)
{
    list_push($keyboard.keys,key_new($keycode,$callback,$arg,$up));
}
variables.keyboard_add = keyboard_add;

fn eventor($system)
{
    while(get_event()) 
    {
        if EVT[ EVT_TYPE ] == EVT_QUIT 
        {
            halt; 
        }
        
        if EVT[EVT_TYPE] == EVT_BUTTONDOWN
        {
            key = EVT[ EVT_KEY ];
            for($i = 0; $i < get_size($system.keyboard.keys); $i+1)
            {
                if($system.keyboard.keys[$i].keycode == key)
                {
                    if($system.keyboard.keys[$i].up == false)
                    {
                        $system.keyboard.keys[$i].callback(default($system.keyboard.keys[$i].arg,null));
                    }
                }
            }
        }
        if EVT[EVT_TYPE] == EVT_BUTTONUP
        {
            key = EVT[ EVT_KEY ];
            for($i = 0; $i < get_size($system.keyboard.keys); $i+1)
            {
                if($system.keyboard.keys[$i].keycode == key)
                {
                    if($system.keyboard.keys[$i].up == true)
                    {
                        $system.keyboard.keys[$i].callback(default($system.keyboard.keys[$i].arg,null));
                    }
                }
            }
        }

        if EVT[ EVT_KEY ] == KEY_MOUSE_LEFT
        {
            x = EVT[ EVT_X ]
            y = EVT[ EVT_Y ]
            tnum = 0
            if EVT[ EVT_KEY ] == EVT_MOUSEBUTTONDOWN 
            {
            }
            if EVT[ EVT_KEY ] == EVT_MOUSEMOVE 
            {
            }
            if EVT[ EVT_KEY ] == EVT_MOUSEBUTTONUP
            {
            }
            if EVT[ EVT_KEY ] == EVT_TOUCHBEGIN
            {
            }
            if EVT[ EVT_KEY ] == EVT_TOUCHMOVE
            {
            }
            if EVT[ EVT_KEY ] == EVT_TOUCHEND
            {
            }
        }
    }
}
variables.eventor = eventor;

//startup functions
//startup functions
//startup functions

fn system_new($configpath)
{
    vsync(0);
    $configpath = default($configpath,"data/config.ini");
    $system = new();
    $system.config = ini_load(read_file($configpath));
    $system.layers = new();
    //list_push($system.layers,layer(0,0,WINDOW_XSIZE,WINDOW_YSIZE));
    if($system.config < 0)
    {
        error("Error loading config file");
    }
    else
    {
        $system.config.width = default($system.config.width,WINDOW_XSIZE);
        $system.config.height = default($system.config.height,WINDOW_YSIZE);
        resize( get_screen(), $system.config.width, $system.config.height );
        set_pixel_size( WINDOW_XSIZE / $system.config.width );
    }
    $system.window = new();
    $system.keyboard = keyboard_new();
    start_timer(0);
    refresh_seed();//required to get a different random number each time
    ret($system);
}
variables.system_new = system_new;

//pattern functions
//pattern functions
//pattern functions

fn ret_black()
{
    ret(BLACK);
}
variables.ret_black = ret_black;

fn ret_white()
{
    ret(WHITE);
}
variables.ret_white = ret_white;

fn ret_red()
{
    ret(RED);
}
variables.ret_red = ret_red;

fn ret_green()
{
    ret(GREEN);
}
variables.ret_green = ret_green;

fn ret_blue()
{
    ret(BLUE);
}
variables.ret_blue = ret_blue;

fn retyellow()
{
    ret(YELLOW);
}
variables.retyellow = retyellow;

fn ret_orange()
{
    ret(ORANGE);
}
variables.ret_orange = ret_orange;

fn pattern($image,$functions)
{
    $img_width = get_xsize($image);
    $img_height = get_ysize($image);
    
    $chunk_size_x = get_xsize($functions);
    $chunk_size_y = get_ysize($functions);

    $clunk_width = $img_width / $chunk_size_x;
    $clunk_height = $img_height / $chunk_size_y;
    
    for($current_chunk_x = 0; $current_chunk_x < $clunk_width; $current_chunk_x+1)
    {
        for($current_chunk_y = 0; $current_chunk_y < $clunk_height; $current_chunk_y+1)
        {
            for($chunk_current_x_local = 0; $chunk_current_x_local < $chunk_size_x; $chunk_current_x_local+1)
            {
                for($chunk_current_y_local = 0; $chunk_current_y_local < $chunk_size_y; $chunk_current_y_local+1)
                {
                    $image[$current_chunk_x * $chunk_size_x + $chunk_current_x_local, $current_chunk_y * $chunk_size_y + $chunk_current_y_local] = $functions[$chunk_current_x_local, $chunk_current_y_local](
                        $image[($current_chunk_x * $chunk_size_x) + $chunk_current_x_local, ($current_chunk_y * $chunk_size_y + $chunk_current_y_local)],//current_pixel
                        $current_chunk_x * $chunk_size_x + $chunk_current_x_local,//x_in_image
                        $current_chunk_y * $chunk_size_y + $chunk_current_y_local,//y_in_image
                        $chunk_current_x_local,//chunk_current_x_local
                        $chunk_current_y_local,//chunk_current_y_local
                        $chunk_size_x,//chunk_size_x
                        $chunk_size_y,//chunk_size_y
                        $current_chunk_x,//$current_chunk_x
                        $current_chunk_y,//current_chunk_y
                        $img_width,//img_width
                        $img_height,//img_height
                        $image,//image
                        $functions//pattern
                    );
                }
            }
        }
    }
}

//main functions
//main functions
//main functions


fn run_function($func,$args)
{
    $func = recursive_prop(variables,$func);
    if $func == 0
    {
        errorf1("run_function: function %s not found", $func);
    }
    ret($func($args[0],$args[1],$args[2],$args[3],$args[4],$args[5],$args[6],$args[7],$args[8],$args[9],$args[10],$args[11],$args[12],$args[13],$args[14],$args[15],$args[16],$args[17],$args[18],$args[19],$args[20],$args[21],$args[22],$args[23],$args[24],$args[25],$args[26],$args[27],$args[28],$args[29],$args[30],$args[31],$args[32],$args[33],$args[34],$args[35],$args[36],$args[37],$args[38],$args[39],$args[40],$args[41],$args[42],$args[43],$args[44],$args[45],$args[46],$args[47],$args[48],$args[49],$args[50],$args[51],$args[52],$args[53],$args[54],$args[55],$args[56],$args[57],$args[58],$args[59],$args[60],$args[61],$args[62],$args[63],$args[64],$args[65],$args[66],$args[67],$args[68],$args[69],$args[70],$args[71],$args[72],$args[73],$args[74],$args[75],$args[76],$args[77],$args[78],$args[79],$args[80],$args[81],$args[82],$args[83],$args[84],$args[85],$args[86],$args[87],$args[88],$args[89],$args[90],$args[91],$args[92],$args[93],$args[94],$args[95],$args[96],$args[97],$args[98],$args[99]));
}
variables.run_function = run_function;

fn treat_arg($arg)
{
    if($arg[0] == '$')//variable
    {                    
        ret(recursive_prop(variables, string_sub($arg, 1, get_size($arg))));
    }
    else
    {
        if(($arg[0] > 47 && $arg[0] < 58) || $arg[0] == '-')//number
        {
            ret(str_to_num($arg));
        }
        else
        {
            if(strcmp($arg, "true") == 0)
            {
                ret(true);
            }
            else
            {
                if(strcmp($arg, "false") == 0)
                {
                    ret(false);
                }
                else//string
                {
                    $temp_arg = string_replace($arg, "`", "");
                    ret($temp_arg);
                }
            }
        }
    }
}
variables.treat_arg = treat_arg;

fn treat_args($splited, $size)
{
    $args = new($size-1);
    for ($i = 1; $i < $size; $i+1)
    {
        $args[$i-1] = treat_arg($splited[$i]);
    }
    ret($args);
}
variables.treat_args = treat_args;

fn interpret($command)
{
    $splited = string_split($command, " ");
    $size = get_size($splited);
    $args = treat_args($splited,$size);
    run_function($splited[0], $args);
    
    for ($i = 0; $i < $size; $i+1)
    {
        remove($splited[$i]);
    }
    remove($splited);
    remove($args);
}
variables.interpret = interpret;

fn bulk_interpret($commands)
{
    $cloned = clone($commands);
    string_replace($cloned, ";\n", ";");
    $splited = string_split($cloned, ";");
    
    for ($i = 0; $i < get_size($splited); $i+1)
    {
        interpret($splited[$i]);
        remove($splited[$i]);
    }
    remove($splited);
    remove($cloned);
}
variables.bulk_interpret = bulk_interpret;

fn bulk_interpret2($commands)//use when parsing native code strings
{
    $splited = string_split($commands, ";");
    string_replace($commands, ";\n", ";");
    for ($i = 0; $i < get_size($splited); $i+1)
    {
        interpret($splited[$i]);
        remove($splited[$i]);
    }
    remove($splited);
    //remove($cloned);
}
variables.bulk_interpret2 = bulk_interpret2;

eval = bulk_interpret;
eval2 = bulk_interpret2;
variables.eval = eval;
variables.eval2 = eval2;